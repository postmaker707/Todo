{"version":3,"sources":["Todo.js","index.js"],"names":["Todo","state","itemArray","text","edit","checked","newTask","event","preventDefault","item","this","push","setState","console","log","target","value","index","splice","keyCode","blur","className","id","align","onSubmit","HandleSubmit","type","placeholder","required","onChange","HandleChange","map","HandleCheck","onClick","RenameTask","autoFocus","HandleRename","onBlur","RenameDone","onKeyDown","HandleKeyPress","DeleteTask","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kNAGaA,EAAb,YAEI,aAAe,IAAD,8BACX,+CACKC,MAAQ,CACXC,UAAW,CAAC,CAACC,KAAM,QAASC,MAAM,EAAOC,SAAS,IAClDC,QAAS,IAJA,EAFlB,0EAUgBC,GACXA,EAAMC,iBAEN,IAAMC,EAAOC,KAAKT,MAAMC,UACpBC,EAAOO,KAAKT,MAAMK,QACtBG,EAAKE,KAAK,CAAER,SACZO,KAAKE,SAAS,CAACV,UAAWO,IAE1BI,QAAQC,IAAIJ,KAAKT,MAAMK,WAlB5B,mCAqBgBC,GACXG,KAAKE,SAAS,CAACN,QAASC,EAAMQ,OAAOC,UAtB1C,iCAyBcT,EAAOU,GAEhBV,EAAMC,iBAEN,IAAIC,EAAOC,KAAKT,MAAMC,UACtBO,EAAKS,OAAOD,EAAO,GACnBP,KAAKE,SAAS,CAACV,UAAWO,MA/B/B,iCAkCcF,EAAOU,GAEhBV,EAAMC,iBAEN,IAAIC,EAAOC,KAAKT,MAAMC,UACtBO,EAAKQ,GAAOb,MAAO,EACnBM,KAAKE,SAAS,CAACV,UAAWO,MAxC/B,qCA2CkBF,GACQ,KAAlBA,EAAMY,SACPZ,EAAMQ,OAAOK,SA7CpB,iCAiDcb,EAAOU,GAChB,IAAIR,EAAOC,KAAKT,MAAMC,UACtBO,EAAKQ,GAAOb,MAAO,EACnBM,KAAKE,SAAS,CAACV,UAAWO,MApD/B,mCAuDgBF,EAAOU,GAClBV,EAAMC,iBAEN,IAAIC,EAAOC,KAAKT,MAAMC,UACtBO,EAAKQ,GAAOd,KAAOI,EAAMQ,OAAOC,MAChCN,KAAKE,SAAS,CAACV,UAAWO,MA5D/B,kCA+DeF,EAAOU,GACjB,IAAIR,EAAOC,KAAKT,MAAMC,UACtBO,EAAKQ,GAAOZ,SAAWI,EAAKQ,GAAOZ,QACnCK,KAAKE,SAAS,CAACV,UAAWO,MAlE/B,+BAqEa,IAAD,OACP,OACG,yBAAKY,UAAU,aAChB,yBAAKC,GAAG,QAAQC,MAAM,UACpB,0BACAC,SAAU,SAACjB,GAAD,OAAW,EAAKkB,aAAalB,KACvC,+CACiB,2BAAOc,UAAU,YAAYK,KAAK,OAAOC,YAAY,OAAOC,UAAQ,EAACC,SAAU,SAACtB,GAAD,OAAW,EAAKuB,aAAavB,MAD7H,YAGE,4BAAQc,UAAU,eAAeK,KAAK,UAAtC,SAGJ,6BACGhB,KAAKT,MAAMC,UAAU6B,KAAI,SAACtB,EAAMQ,GAC/B,OACE,yBAAKM,MAAM,UACP,8BACC,2BAAOF,UAAU,WAAWK,KAAK,WAAYG,SAAU,SAACtB,GAAD,OAAW,EAAKyB,YAAYzB,EAC3EU,MAFT,YAGIR,EAAKL,MACP,0BAAMiB,UAAU,YAAYY,QAAS,SAAC1B,GAAD,OAAW,EAAK2B,WAAW3B,EAAOU,KACtER,EAAKN,MAELM,EAAKL,MACN,0BAAMiB,UAAU,aACd,2BAAOc,WAAS,EAACT,KAAK,OAAOV,MAAOP,EAAKN,KAAM0B,SAAU,SAACtB,GAAD,OAAW,EAAK6B,aAAa7B,EAAOU,IAAQoB,OAAQ,SAAC9B,GAAD,OAAW,EAAK+B,WAAW/B,EAAOU,IAAQsB,UAAW,SAAChC,GAAD,OAAW,EAAKiC,eAAejC,EAAOU,OAT5M,WAWc,4BAAQS,KAAK,OAAOL,UAAU,QAAQY,QAAS,SAAC1B,GAAD,OAAW,EAAKkC,WAAWlC,EAAOU,KAAjF,gBAhG/B,GAA0ByB,IAAMC,W,MCGhCC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,U","file":"static/js/main.77c2dde7.chunk.js","sourcesContent":["'use strict';\r\nimport React from 'react';\r\n\r\nexport class Todo extends React.Component {\r\n  \r\n    constructor() {\r\n       super();\r\n       this.state = {\r\n         itemArray: [{text: 'Task1', edit: false, checked: false,}],\r\n         newTask: ''\r\n       }\r\n   }\r\n   \r\n   HandleSubmit(event) {\r\n     event.preventDefault();\r\n     \r\n     const item = this.state.itemArray;\r\n     var text = this.state.newTask;\r\n     item.push({ text });\r\n     this.setState({itemArray: item});\r\n     \r\n     console.log(this.state.newTask);\r\n   }\r\n   \r\n   HandleChange(event) {\r\n     this.setState({newTask: event.target.value});\r\n   }\r\n  \r\n   DeleteTask(event, index) {\r\n     \r\n     event.preventDefault();\r\n     \r\n     var item = this.state.itemArray;\r\n     item.splice(index, 1);\r\n     this.setState({itemArray: item});\r\n   }\r\n   \r\n   RenameTask(event, index) {\r\n     \r\n     event.preventDefault();\r\n         \r\n     var item = this.state.itemArray;\r\n     item[index].edit = true;\r\n     this.setState({itemArray: item});\r\n   }\r\n   \r\n   HandleKeyPress(event){\r\n     if(event.keyCode === 13){\r\n       event.target.blur(); \r\n     }\r\n  }\r\n   \r\n   RenameDone(event, index) {\r\n     var item = this.state.itemArray;\r\n     item[index].edit = false;\r\n     this.setState({itemArray: item});\r\n   }\r\n   \r\n   HandleRename(event, index) {\r\n     event.preventDefault();\r\n     \r\n     var item = this.state.itemArray;\r\n     item[index].text = event.target.value;\r\n     this.setState({itemArray: item});\r\n   }\r\n   \r\n   HandleCheck(event, index) {\r\n     var item = this.state.itemArray;\r\n     item[index].checked = !item[index].checked;\r\n     this.setState({itemArray: item});\r\n   }\r\n   \r\n   render() {\r\n     return (\r\n        <div className=\"fatherDiv\">\r\n       <div id=\"cont1\" align=\"center\">\r\n         <form \r\n         onSubmit={(event) => this.HandleSubmit(event)}>\r\n         <label>\r\n         Task:&nbsp;&nbsp;<input className=\"inputTask\" type=\"text\" placeholder=\"Task\" required onChange={(event) => this.HandleChange(event)}/>&nbsp;&nbsp;\r\n           </label>\r\n           <button className=\"buttonSubmit\" type=\"submit\" >ADD</button>\r\n         </form>\r\n           </div>\r\n       <div>\r\n         {this.state.itemArray.map((item, index) => {\r\n           return (\r\n             <div align=\"center\">\r\n                 <span>\r\n                  <input className=\"checkBox\" type=\"checkbox\"  onChange={(event) => this.HandleCheck(event, \r\n                          index)}/>&nbsp;&nbsp;\r\n                   {!item.edit && (\r\n                   <span className=\"task_name\" onClick={(event) => this.RenameTask(event, index)}>\r\n                   {item.text}\r\n                   </span>)}\r\n                   {item.edit && (\r\n                   <span className=\"task_name\">\r\n                     <input autoFocus type=\"text\" value={item.text} onChange={(event) => this.HandleRename(event, index)} onBlur={(event) => this.RenameDone(event, index)} onKeyDown={(event) => this.HandleKeyPress(event, index)}/>\r\n                   </span>)}\r\n                   &nbsp;&nbsp;<button type=\"text\" className=\"close\" onClick={(event) => this.DeleteTask(event, index)}>X</button>\r\n                </span>\r\n             </div>\r\n           );\r\n         })}\r\n         </div>\r\n         </div>\r\n         \r\n     );\r\n   }\r\n };\r\n \r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Todo} from './Todo';\nimport 'typeface-roboto';\n\nReactDOM.render(<Todo />, document.getElementById('root'));\n\n"],"sourceRoot":""}